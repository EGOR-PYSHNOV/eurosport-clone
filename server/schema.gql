# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  title: String!
  description: String!
  slug: String!
  order: Int!
  createdDate: DateTime!
  updatedDate: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Article {
  id: Int!
  title: String!
  description: String
  text: String
  hot: Boolean!
  views: Int!
  image: String
  video: String
  slug: String!
  createdDate: DateTime!
  updatedDate: DateTime!
  categoryId: Int!
  category: Category!
  comments: [Comment!]!
}

type Role {
  id: Int!
  title: String!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type User {
  id: Int!
  login: String!
  email: String!
  password: String!
  createdDate: DateTime!
  updatedDate: DateTime!
  roleId: Int!
  role: Role!
}

type Comment {
  id: Int!
  text: String!
  userId: Int!
  user: User!
  articleId: Int!
  article: Article!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type UserToken {
  token: String
  user: User
}

type Query {
  getArticle(slug: String!): Article!
  getTopViewsArticles(sortTopViewsByTypePost: sortTopViewsByTypePost): [Article!]!
  getHotArticle: Article!
  getArticlesByCategory(id: Int!): [Article!]!
  getAllArticles(excludeArticle: String, isRandom: Boolean, filters: Filters): [Article!]!
  ArticlesSearchQuery(filters: String!): [Article!]!
  getCategory(slug: String!): Category!
  getAllCategories: [Category!]!
  getComment(id: Int!): Comment!
  getComments(id: Int!): [Comment!]!
  getRole(id: Int!): Role!
  getAllRoles: [Role!]!
  getAllUsers: [User!]!
  getUser(id: Int!): User!
  me: User!
}

input sortTopViewsByTypePost {
  type: TypePost
}

enum TypePost {
  RegularPost
  VideoPost
}

input Filters {
  limit: Int
  sortByDate: Sort
  sortTopViewsByTypePost: TypePost
}

enum Sort {
  ASC
  DESC
}

type Mutation {
  createArticle(title: String!, description: String, text: String, hot: Boolean, views: Float, image: Upload, video: String, slug: String, categoryId: Int!): Article!
  updateArticle(title: String!, description: String, text: String, hot: Boolean, views: Float, image: Upload, video: String, slug: String, categoryId: Int!, id: Int!): Article!
  deleteArticle(id: Int!): User
  updateViewsArticle(id: Int!): Article
  createCategory(title: String!, description: String, slug: String, order: Int = 0): Category!
  updateCategory(title: String, description: String, slug: String, order: Int, id: Int!): Category!
  deleteCategory(id: Int!): Category
  createComment(text: String!, articleId: Int!): Comment!
  updateComment(text: String!, articleId: Int!, id: Int!): Comment!
  deleteComment(id: Int!): Comment
  createRole(title: String!): Role!
  updateRole(title: String!, id: Int!): Role!
  deleteRole(id: Int!): Role
  updateUserRole(roleId: Int!, id: Int!): User!
  uploadFile(file: Upload!): Boolean!
  register(input: createUserDto!): UserToken
  login(input: AuthLoginInput!): UserToken!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input createUserDto {
  login: String!
  email: String!
  password: String!
  roleId: Int = 1
}

input AuthLoginInput {
  login: String!
  password: String!
}
